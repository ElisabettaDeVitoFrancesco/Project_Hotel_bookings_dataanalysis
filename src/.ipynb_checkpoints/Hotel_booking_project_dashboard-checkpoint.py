{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "325fb9de",
   "metadata": {},
   "source": [
    "# HOTEL BOOKING PROJECT - DASHBOARD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "88393e71",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting jupyter-dash\n",
      "  Downloading jupyter_dash-0.4.2-py3-none-any.whl (23 kB)\n",
      "Collecting ansi2html\n",
      "  Downloading ansi2html-1.8.0-py3-none-any.whl (16 kB)\n",
      "Requirement already satisfied: nest-asyncio in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from jupyter-dash) (1.5.5)\n",
      "Collecting retrying\n",
      "  Downloading retrying-1.3.4-py3-none-any.whl (11 kB)\n",
      "Requirement already satisfied: ipython in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from jupyter-dash) (7.31.1)\n",
      "Requirement already satisfied: flask in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from jupyter-dash) (1.1.2)\n",
      "Collecting dash\n",
      "  Downloading dash-2.8.1-py3-none-any.whl (9.9 MB)\n",
      "     ---------------------------------------- 9.9/9.9 MB 22.6 MB/s eta 0:00:00\n",
      "Requirement already satisfied: ipykernel in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from jupyter-dash) (6.15.2)\n",
      "Requirement already satisfied: requests in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from jupyter-dash) (2.28.1)\n",
      "Collecting dash-core-components==2.0.0\n",
      "  Downloading dash_core_components-2.0.0-py3-none-any.whl (3.8 kB)\n",
      "Collecting dash-table==5.0.0\n",
      "  Downloading dash_table-5.0.0-py3-none-any.whl (3.9 kB)\n",
      "Requirement already satisfied: plotly>=5.0.0 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from dash->jupyter-dash) (5.9.0)\n",
      "Collecting dash-html-components==2.0.0\n",
      "  Downloading dash_html_components-2.0.0-py3-none-any.whl (4.1 kB)\n",
      "Requirement already satisfied: Jinja2>=2.10.1 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from flask->jupyter-dash) (2.11.3)\n",
      "Requirement already satisfied: Werkzeug>=0.15 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from flask->jupyter-dash) (2.0.3)\n",
      "Requirement already satisfied: itsdangerous>=0.24 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from flask->jupyter-dash) (2.0.1)\n",
      "Requirement already satisfied: click>=5.1 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from flask->jupyter-dash) (8.0.4)\n",
      "Requirement already satisfied: packaging in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash) (21.3)\n",
      "Requirement already satisfied: jupyter-client>=6.1.12 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash) (7.3.4)\n",
      "Requirement already satisfied: debugpy>=1.0 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash) (1.5.1)\n",
      "Requirement already satisfied: pyzmq>=17 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash) (23.2.0)\n",
      "Requirement already satisfied: matplotlib-inline>=0.1 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash) (0.1.6)\n",
      "Requirement already satisfied: traitlets>=5.1.0 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash) (5.1.1)\n",
      "Requirement already satisfied: psutil in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash) (5.9.0)\n",
      "Requirement already satisfied: tornado>=6.1 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipykernel->jupyter-dash) (6.1)\n",
      "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash) (3.0.20)\n",
      "Requirement already satisfied: jedi>=0.16 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash) (0.18.1)\n",
      "Requirement already satisfied: pygments in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash) (2.11.2)\n",
      "Requirement already satisfied: backcall in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash) (0.2.0)\n",
      "Requirement already satisfied: decorator in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash) (5.1.1)\n",
      "Requirement already satisfied: pickleshare in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash) (0.7.5)\n",
      "Requirement already satisfied: setuptools>=18.5 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash) (63.4.1)\n",
      "Requirement already satisfied: colorama in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from ipython->jupyter-dash) (0.4.5)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from requests->jupyter-dash) (1.26.11)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from requests->jupyter-dash) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from requests->jupyter-dash) (3.3)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from requests->jupyter-dash) (2022.9.14)\n",
      "Requirement already satisfied: six>=1.7.0 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from retrying->jupyter-dash) (1.16.0)\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.0 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from jedi>=0.16->ipython->jupyter-dash) (0.8.3)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from Jinja2>=2.10.1->flask->jupyter-dash) (2.0.1)\n",
      "Requirement already satisfied: jupyter-core>=4.9.2 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from jupyter-client>=6.1.12->ipykernel->jupyter-dash) (4.11.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from jupyter-client>=6.1.12->ipykernel->jupyter-dash) (2.8.2)\n",
      "Requirement already satisfied: entrypoints in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from jupyter-client>=6.1.12->ipykernel->jupyter-dash) (0.4)\n",
      "Requirement already satisfied: tenacity>=6.2.0 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from plotly>=5.0.0->dash->jupyter-dash) (8.0.1)\n",
      "Requirement already satisfied: wcwidth in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython->jupyter-dash) (0.2.5)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from packaging->ipykernel->jupyter-dash) (3.0.9)\n",
      "Requirement already satisfied: pywin32>=1.0 in c:\\users\\elisa\\anaconda3\\lib\\site-packages (from jupyter-core>=4.9.2->jupyter-client>=6.1.12->ipykernel->jupyter-dash) (302)\n",
      "Installing collected packages: dash-table, dash-html-components, dash-core-components, retrying, ansi2html, dash, jupyter-dash\n",
      "Successfully installed ansi2html-1.8.0 dash-2.8.1 dash-core-components-2.0.0 dash-html-components-2.0.0 dash-table-5.0.0 jupyter-dash-0.4.2 retrying-1.3.4\n"
     ]
    }
   ],
   "source": [
    "!pip install jupyter-dash"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d18bf907",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import required libraries\n",
    "import pandas as pd\n",
    "import dash\n",
    "from dash import Dash, dcc, html, Input, Output, State\n",
    "#import dash_html_components as html\n",
    "#import dash_core_components as dcc # Deprecated\n",
    "from dash.dependencies import Input, Output, State\n",
    "import plotly.graph_objects as go\n",
    "import plotly.express as px\n",
    "from plotly.offline import iplot\n",
    "from dash import no_update\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "mpl.style.use('ggplot')\n",
    "\n",
    "import sort_dataframeby_monthorweek as sd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "121f4ade",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a dash application\n",
    "app = dash.Dash(__name__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8694f658",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clear the layout and do not display exception till callback gets executed\n",
    "app.config.suppress_callback_exceptions = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "18b29cdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read the cleaned hotel data into pandas dataframe\n",
    "df_hotel = pd.read_csv(\"hotel_bookings_cleaned.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24baf981",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
      "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:8050/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [06/Mar/2023 18:33:52] \"GET / HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [06/Mar/2023 18:33:52] \"GET /_dash-layout HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [06/Mar/2023 18:33:52] \"GET /_dash-dependencies HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [06/Mar/2023 18:33:52] \"GET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1\" 200 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exception on /_dash-update-component [POST]\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\elisa\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"C:\\Users\\elisa\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"C:\\Users\\elisa\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"C:\\Users\\elisa\\anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 39, in reraise\n",
      "    raise value\n",
      "  File \"C:\\Users\\elisa\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"C:\\Users\\elisa\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"C:\\Users\\elisa\\anaconda3\\lib\\site-packages\\dash\\dash.py\", line 1273, in dispatch\n",
      "    ctx.run(\n",
      "  File \"C:\\Users\\elisa\\anaconda3\\lib\\site-packages\\dash\\_callback.py\", line 455, in add_context\n",
      "    flat_output_values = flatten_grouping(output_value, output)\n",
      "  File \"C:\\Users\\elisa\\anaconda3\\lib\\site-packages\\dash\\_grouping.py\", line 35, in flatten_grouping\n",
      "    validate_grouping(grouping, schema)\n",
      "  File \"C:\\Users\\elisa\\anaconda3\\lib\\site-packages\\dash\\_grouping.py\", line 210, in validate_grouping\n",
      "    SchemaTypeValidationError.check(grouping, full_schema, path, (tuple, list))\n",
      "  File \"C:\\Users\\elisa\\anaconda3\\lib\\site-packages\\dash\\_grouping.py\", line 162, in check\n",
      "    raise SchemaTypeValidationError(value, full_schema, path, expected_type)\n",
      "dash._grouping.SchemaTypeValidationError: Schema: [<Output `plot1.children`>, <Output `plot2.children`>, <Output `plot3.children`>, <Output `plot4.children`>, <Output `plot5.children`>]\n",
      "Path: ()\n",
      "Expected type: (<class 'tuple'>, <class 'list'>)\n",
      "Received value of type <class 'NoneType'>:\n",
      "    None\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "127.0.0.1 - - [06/Mar/2023 18:33:52] \"POST /_dash-update-component HTTP/1.1\" 500 -\n",
      "127.0.0.1 - - [06/Mar/2023 18:33:54] \"POST /_dash-update-component HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [06/Mar/2023 18:33:54] \"GET /_dash-component-suites/dash/dcc/async-graph.js HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [06/Mar/2023 18:33:54] \"GET /_dash-component-suites/dash/dcc/async-plotlyjs.js HTTP/1.1\" 200 -\n",
      "C:\\Users\\elisa\\AppData\\Local\\Temp\\ipykernel_16512\\3507835293.py:34: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "127.0.0.1 - - [06/Mar/2023 18:33:56] \"POST /_dash-update-component HTTP/1.1\" 200 -\n"
     ]
    }
   ],
   "source": [
    "\"\"\"Compute graph data for creating hotel bookings report \n",
    "\n",
    "Function that takes hotel data as input and create dataframes based on the grouping condition\n",
    "to be used for plottling charts and graphs.\n",
    "\n",
    "Argument:\n",
    "     \n",
    "    df: Filtered dataframe\n",
    "    \n",
    "Returns:\n",
    "   Dataframes to create graph. \n",
    "\"\"\"\n",
    "\n",
    "def compute_data_choice_1(df_hotel):\n",
    "    \n",
    "    # df with only not cancelled (nc) bookings\n",
    "    df_hotel_nc = df_hotel[df_hotel['is_canceled']==0]\n",
    "    \n",
    "    # Origin countries of guests\n",
    "    df_map = df_hotel_nc['country'].value_counts().reset_index()\n",
    "    df_map.columns = ['Country', 'Guests']\n",
    "    \n",
    "    # Mean monthly price per hotel type (over the year)\n",
    "    df_hotel_nc_mean_price = df_hotel_nc.groupby('arrival_date_month')['adr'].mean().reset_index()\n",
    "    df_hotel_nc_mean_price.columns = ['Month','Monthly Price']\n",
    "    df_hotel_nc_mean_price_ord = sd.Sort_Dataframeby_Month(df_hotel_nc_mean_price, 'Month')\n",
    "    \n",
    "    # Nr of bookings per month per hotel type\n",
    "    df_monthly_bookings = df_hotel['arrival_date_month'].value_counts().to_frame().reset_index()\n",
    "    df_monthly_bookings.columns = ['Month','Nr of Bookings']\n",
    "    df_monthly_bookings_ord = sd.Sort_Dataframeby_Month(df_monthly_bookings, 'Month')\n",
    "    \n",
    "    # Nr bookings per nights of stay per hotel type\n",
    "    df_hotel_nc['Total_nights'] = df_hotel_nc['stays_in_weekend_nights'] + df_hotel_nc['stays_in_week_nights']\n",
    "    df_stays = df_hotel_nc.groupby('Total_nights').agg('count').reset_index()\n",
    "    df_stays = df_stays.iloc[:,0:2]\n",
    "    df_stays.columns = ['Total nights', 'Nr of stays']\n",
    "    \n",
    "    # Nr reservations / cancellations per hotel type\n",
    "    df_canc_res = df_hotel.groupby('is_canceled').agg('count').reset_index()\n",
    "    df_canc_res = df_canc_res.iloc[:,0:2]\n",
    "    df_canc_res.columns = ['Reservation Cancellation', 'Count']\n",
    "    \n",
    "    return df_map, df_hotel_nc_mean_price_ord, df_monthly_bookings_ord, df_stays, df_canc_res\n",
    "\n",
    "def compute_data_choice_2(df_hotel):\n",
    "    \n",
    "    # df with only not cancelled (nc) bookings\n",
    "    df_hotel_nc = df_hotel[df_hotel['is_canceled']==0]\n",
    "    \n",
    "    # Nr of bookings per nr of special requests per reserved room type\n",
    "    df_room_req = df_hotel.groupby('total_of_special_requests')['reserved_room_type'].value_counts().to_frame()\n",
    "    df_room_req.columns = ['Nr of bookings']\n",
    "    df_room_req = df_room_req.reset_index()\n",
    "    df_room_req.columns = ['Special requests', 'Room type', 'Nr of bookings']\n",
    "    \n",
    "    # Nr of bookings per nr of special request per cancelled/not cancelled\n",
    "    df_cancel_req = df_hotel.groupby('total_of_special_requests')['is_canceled'].value_counts().to_frame()\n",
    "    df_cancel_req.columns = ['Nr of bookings']\n",
    "    df_cancel_req = df_cancel_req.reset_index()\n",
    "    df_cancel_req.columns = ['Special requests', 'Cancelled (1)/Not cancelled (0)', 'Nr of bookings']\n",
    "    df_cancel_req['Cancelled (1)/Not cancelled (0)'] = df_cancel_req['Cancelled (1)/Not cancelled (0)'].astype(str)\n",
    "    \n",
    "    # Nr of guests per month per hotel type\n",
    "    df_hotel_nc['Tot_guests_per_booking'] = df_hotel_nc[['adults', 'children', 'babies']].sum(axis=1)\n",
    "    df_guests_month = df_hotel_nc.groupby('arrival_date_month')['Tot_guests_per_booking'].sum().to_frame().reset_index()\n",
    "    df_guests_month.columns = ['Month', 'Total guests']\n",
    "    df_guests_month = sd.Sort_Dataframeby_Month(df_guests_month, 'Month')\n",
    "    \n",
    "    # Preferred meal types per room types\n",
    "    df_meal_room = df_hotel_nc.groupby('meal')['reserved_room_type'].value_counts().to_frame()\n",
    "    df_meal_room.columns = ['Nr of preferences']\n",
    "    df_meal_room.index.name = 'meal_type'\n",
    "    df_meal_room = df_meal_room.reset_index()\n",
    "    df_meal_room.columns = ['Meal', 'Room type', 'Nr of preferences']\n",
    "    \n",
    "    # Nr of bookings per market segment\n",
    "    df_market = df_hotel_nc['market_segment'].value_counts().to_frame().reset_index()\n",
    "    df_market.columns = ['Market segment', 'Nr of bookings']\n",
    "\n",
    "    \n",
    "    return df_room_req, df_cancel_req, df_guests_month, df_meal_room, df_market\n",
    "\n",
    "# Application layout\n",
    "app.layout = html.Div(children=[ \n",
    "                                # Add title to the dashboard\n",
    "                                html.H1('Hotel bookings analysis',\n",
    "                                    style={'textAlign':'center', 'font-size':30,\n",
    "                                            'backgroundColor':'#01386a','color':'snow'}),\n",
    "    \n",
    "                                # Dropdown creation\n",
    "                                # Create an outer division \n",
    "                                html.Div([\n",
    "                                    # Add an inner division\n",
    "                                    html.Div([\n",
    "                                        # Create an division for adding dropdown helper text for report type\n",
    "                                        html.Div(\n",
    "                                            [\n",
    "                                            html.H2('Report Type:', style={'margin-right': '2em',\n",
    "                                                                           'backgroundColor':'#01386a',\n",
    "                                                                           'color':'snow'}),\n",
    "                                            ]\n",
    "                                        ),\n",
    "                                        # Add a dropdown\n",
    "                                        dcc.Dropdown(id='input-type',\n",
    "                                                options=[\n",
    "                                                    {'label':'Hotel Bookings analysis', 'value':'OPT1'},\n",
    "                                                    {'label':'Hotel Guests analysis', 'value':'OPT2'}\n",
    "                                                ],\n",
    "                                                placeholder='Select a report type',\n",
    "                                                style={'width':'80%','padding':'3px','font-size':'20px',\n",
    "                                                       'text-align':'center','backgroundColor':'#01386a','color':'snow'})\n",
    "                                        \n",
    "                                    # Place them next to each other using the division style\n",
    "                                    ], style={'display':'flex','backgroundColor':'#01386a','color':'snow'}),\n",
    "                                    \n",
    "                                   # Add next division \n",
    "                                   html.Div([\n",
    "                                       # Create an division for adding dropdown helper text for choosing year\n",
    "                                        html.Div(\n",
    "                                            [\n",
    "                                            html.H2('Choose Hotel type:', style={'margin-right': '2em',\n",
    "                                                                                 'backgroundColor':'#01386a',\n",
    "                                                                                 'color':'snow'})\n",
    "                                            ]\n",
    "                                        ),\n",
    "                                        dcc.Dropdown(id='input-hotel', \n",
    "                                                     # Update dropdown values using list comphrehension\n",
    "                                                     options=[{'label': 'Resort Hotel', 'value': 'Resort Hotel'},\n",
    "                                                             {'label': 'City Hotel', 'value': 'City Hotel'}],\n",
    "                                                     placeholder=\"Select a Hotel type\",\n",
    "                                                     style={'width':'80%', 'padding':'3px', 'font-size': '20px', \n",
    "                                                            'text-align-last' : 'center','backgroundColor':'#01386a',\n",
    "                                                            'color':'snow'}\n",
    "                                                     #multi=True\n",
    "                                                    ),\n",
    "                                            # Place them next to each other using the division style\n",
    "                                            ], style={'display': 'flex','backgroundColor':'#01386a',\n",
    "                                                      'color':'snow'}),  \n",
    "                                          ]),\n",
    "                                \n",
    "                                # Add Computed graphs\n",
    "                                # Added an empty division and provided an id that will be updated\n",
    "                                # during callback\n",
    "                                html.Div([ ], id='plot1'),\n",
    "    \n",
    "                                html.Div([\n",
    "                                        html.Div([ ], id='plot2'),\n",
    "                                        html.Div([ ], id='plot3')\n",
    "                                ], style={'display': 'flex','margin-left': 100, 'margin-right':100}), #, style={'display':'inline-block'}  this works but in smaller screen the plots go to the next line\n",
    "                                \n",
    "                                # Add a division with two empty divisions inside\n",
    "                                html.Div([\n",
    "                                        html.Div([ ], id='plot4'),\n",
    "                                        html.Div([ ], id='plot5', style = {'float': 'right'})\n",
    "                                ], style={'display': 'flex','margin-left': 100, 'margin-right':100}), # , style={'display': 'flex'} inside the round brakcet and after the sqaured one , style={'display':'inline-block','margin-left': 100, 'margin-right':100}\n",
    "                               \n",
    "                                ])\n",
    "\n",
    "\n",
    "# Callback function definition\n",
    "@app.callback( [Output(component_id='plot1', component_property='children'),\n",
    "                Output(component_id='plot2', component_property='children'),\n",
    "                Output(component_id='plot3', component_property='children'),\n",
    "                Output(component_id='plot4', component_property='children'),\n",
    "                Output(component_id='plot5', component_property='children')],\n",
    "               [Input(component_id='input-type', component_property='value'),\n",
    "                Input(component_id='input-hotel', component_property='value')],\n",
    "               # Holding output state till user enters all the form information.\n",
    "               # In this case, it will be chart type and year\n",
    "               [State(\"plot1\", 'children'), State(\"plot2\", \"children\"),\n",
    "                State(\"plot3\", \"children\"), State(\"plot4\", \"children\"),\n",
    "                State(\"plot5\", \"children\")\n",
    "               ])\n",
    "\n",
    "# Add computation to callback function and return graph\n",
    "def get_graph(chart, hotel_type, children1, children2, children3, children4, children5): # \n",
    "    # Select data\n",
    "    df = df_hotel[df_hotel['hotel']==hotel_type]\n",
    "       \n",
    "    if chart == 'OPT1': # Hotel Bookings analysis\n",
    "\n",
    "        # Compute required information for creating graph from the data\n",
    "        df_map, df_hotel_nc_mean_price_ord, df_monthly_bookings_ord, df_stays, df_canc_res = compute_data_choice_1(df)\n",
    "\n",
    "        # Origin countries  of bookings\n",
    "        map_origin = px.choropleth(df_map,\n",
    "                                   locations = df_map['Country'],\n",
    "                                   color = df_map['Guests'],\n",
    "                                   hover_name = df_map['Country'],\n",
    "                                   title = f\"Origin countries of hotel guests in {hotel_type}\")\n",
    "        map_origin.update_layout({'plot_bgcolor': '#01386a',\n",
    "                                  'paper_bgcolor': '#01386a'},\n",
    "                                  font_color=\"snow\",\n",
    "                                  title_font_size = 25,\n",
    "                                  xaxis=dict(showgrid=False),\n",
    "                                  yaxis=dict(showgrid=False))\n",
    "        \n",
    "        \n",
    "        # Average flight time by reporting airline\n",
    "        line_price = px.line(df_hotel_nc_mean_price_ord,\n",
    "                             x='Month',\n",
    "                             y='Monthly Price',\n",
    "                             title= f\"Monthly mean room-price over the year in {hotel_type}\")\n",
    "        line_price.update_layout({'plot_bgcolor': '#01386a',\n",
    "                                  'paper_bgcolor': '#01386a'},\n",
    "                                 font_color=\"snow\",\n",
    "                                 title_font_size = 25,\n",
    "                                 xaxis=dict(showgrid=False),\n",
    "                                 yaxis=dict(showgrid=False))\n",
    "        line_price.update_traces(line_color='#a2cffe')\n",
    "        \n",
    "        # Barplot Nr of bookings per nr of nights of stay per hotel type\n",
    "        bar_stays = px.bar(df_stays,\n",
    "                           x = 'Total nights',\n",
    "                           y = 'Nr of stays',\n",
    "                           text = 'Nr of stays',\n",
    "                           barmode = 'group',\n",
    "                           height = 400,\n",
    "                           title = f\"Nr of bookings per nr of night of stay in {hotel_type}\")\n",
    "        bar_stays.update_layout({'plot_bgcolor': '#01386a',\n",
    "                                  'paper_bgcolor': '#01386a'},\n",
    "                                  font_color=\"snow\",\n",
    "                                  title_font_size = 25,\n",
    "                                  xaxis=dict(showgrid=False),\n",
    "                                  yaxis=dict(showgrid=False))\n",
    "        bar_stays.update_traces(marker_color='#a2cffe')\n",
    "        \n",
    "        # Lineplot Nr of bookings per month per hotel type\n",
    "        line_booking = px.line(df_monthly_bookings_ord,\n",
    "                            x='Month',\n",
    "                            y='Nr of Bookings',\n",
    "                            title= f\"Nr of bookings per month in {hotel_type}\")\n",
    "        line_booking.update_layout({'plot_bgcolor': '#01386a',\n",
    "                                    'paper_bgcolor': '#01386a'},\n",
    "                                    font_color=\"snow\",\n",
    "                                    title_font_size = 25,\n",
    "                                    xaxis=dict(showgrid=False),\n",
    "                                    yaxis=dict(showgrid=False))\n",
    "        line_booking.update_traces(line_color='#a2cffe')\n",
    "        \n",
    "        # Barplot nr of cancellations / reservations per hotel type\n",
    "        bar_canc_res = px.bar(df_canc_res,\n",
    "                              x='Reservation Cancellation',\n",
    "                              y='Count',\n",
    "                              barmode='group',\n",
    "                              height=400,\n",
    "                              title=f'Nr of cancellations (1) and reservations (0) in {hotel_type}')\n",
    "        bar_canc_res.update_layout({'plot_bgcolor': '#01386a',\n",
    "                                    'paper_bgcolor': '#01386a'},\n",
    "                                    font_color=\"snow\",\n",
    "                                    title_font_size = 25,\n",
    "                                    xaxis=dict(showgrid=False),\n",
    "                                    yaxis=dict(showgrid=False))\n",
    "        bar_canc_res.update_traces(marker_color='#a2cffe')\n",
    "\n",
    "\n",
    "        # Return dcc.Graph component to the empty division\n",
    "        return [dcc.Graph(figure = map_origin), \n",
    "                dcc.Graph(figure = line_price),\n",
    "                dcc.Graph(figure = bar_stays),\n",
    "                dcc.Graph(figure = line_booking),\n",
    "                dcc.Graph(figure = bar_canc_res)\n",
    "               ]\n",
    "    \n",
    "    elif chart == 'OPT2': \n",
    "        # HOTEL GUESTS ANALYSIS\n",
    "        df_room_req, df_cancel_req, df_guests_month, df_meal_room, df_market = compute_data_choice_2(df)\n",
    "\n",
    "        # Barplot nr of bookings by nr of special requests per room type\n",
    "        bar_room_req = px.bar(df_room_req,\n",
    "                              x = 'Special requests',\n",
    "                              y = 'Nr of bookings',\n",
    "                              color = 'Room type',\n",
    "                              height = 400,\n",
    "                              title = f\"Nr of bookings per nr of special requests per room type in {hotel_type}\")\n",
    "        bar_room_req.update_layout({'plot_bgcolor': '#01386a',\n",
    "                                    'paper_bgcolor': '#01386a'},\n",
    "                                    font_color=\"snow\",\n",
    "                                    title_font_size = 25,\n",
    "                                    xaxis=dict(showgrid=False),\n",
    "                                    yaxis=dict(showgrid=False))\n",
    "                        \n",
    "        # Barplot nr of bookings by nr of special requests per cancelled/not cancelled\n",
    "        bar_cancel_req = px.bar(df_cancel_req,\n",
    "                                x = 'Special requests',\n",
    "                                y = 'Nr of bookings',\n",
    "                                barmode='group',\n",
    "                                color = 'Cancelled (1)/Not cancelled (0)',\n",
    "                                color_discrete_map={ # replaces default color mapping by value\n",
    "                                \"0\": \"#3c73a8\", \"1\": \"#a2cffe\"\n",
    "                                },\n",
    "                                height = 400,\n",
    "                                title = f\"Nr of bookings per nr of special requests per cancelled (1)/not cancelled (0) in {hotel_type}\")\n",
    "        bar_cancel_req.update_layout({'plot_bgcolor': '#01386a',\n",
    "                                      'paper_bgcolor': '#01386a'},\n",
    "                                      font_color=\"snow\",\n",
    "                                      title_font_size = 25,\n",
    "                                      xaxis=dict(showgrid=False),\n",
    "                                      yaxis=dict(showgrid=False))\n",
    "        \n",
    "        # Lineplot nr of guests per month per hotel type\n",
    "        line_guests_month = px.line(df_guests_month,\n",
    "                                    x='Month',\n",
    "                                    y= 'Total guests',\n",
    "                                    title=f'Nr of guests per month in {hotel_type}')\n",
    "        line_guests_month.update_layout({'plot_bgcolor': '#01386a',\n",
    "                                        'paper_bgcolor': '#01386a'},\n",
    "                                         font_color=\"snow\",\n",
    "                                         title_font_size = 25,\n",
    "                                         xaxis=dict(showgrid=False),\n",
    "                                         yaxis=dict(showgrid=False))\n",
    "        line_guests_month.update_traces(line_color='#a2cffe')\n",
    "        \n",
    "        # Barplot preferred meals type per room type per hotel type\n",
    "        bar_meal_room = px.bar(df_meal_room,\n",
    "                               x = 'Meal',\n",
    "                               y = 'Nr of preferences',\n",
    "                               color = 'Room type',\n",
    "                               height = 400,\n",
    "                               title = f'Preferred meal type per room type in {hotel_type}')\n",
    "        bar_meal_room.update_layout({'plot_bgcolor': '#01386a',\n",
    "                                     'paper_bgcolor': '#01386a'},\n",
    "                                     font_color=\"snow\",\n",
    "                                     title_font_size = 25,\n",
    "                                     xaxis=dict(showgrid=False),\n",
    "                                     yaxis=dict(showgrid=False))\n",
    "        \n",
    "        # Pie chart nr of bookings per market segment ['Market segment', 'Nr of bookings']\n",
    "        pie_market = px.pie(df_market,\n",
    "                            values = 'Nr of bookings',\n",
    "                            names = 'Market segment',\n",
    "                            title = f'Share of bookings per market segment in {hotel_type}')\n",
    "        pie_market.update_layout({'plot_bgcolor': '#01386a',\n",
    "                                  'paper_bgcolor': '#01386a'},\n",
    "                                  font_color=\"snow\",\n",
    "                                  title_font_size = 25)\n",
    "        \n",
    "        return[dcc.Graph(figure = bar_room_req), \n",
    "               dcc.Graph(figure = bar_cancel_req), \n",
    "               dcc.Graph(figure = line_guests_month), \n",
    "               dcc.Graph(figure = bar_meal_room), \n",
    "               dcc.Graph(figure = pie_market)]\n",
    "\n",
    "\n",
    "# Run the app\n",
    "if __name__ == '__main__':\n",
    "    app.run_server()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9625326f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
